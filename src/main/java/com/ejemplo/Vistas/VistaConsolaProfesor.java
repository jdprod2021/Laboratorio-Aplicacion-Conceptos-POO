package com.ejemplo.Vistas;

import java.util.List;

import com.ejemplo.Controladores.ProfesorControlador;
import com.ejemplo.DTOs.Respuesta.ProfesorRespuestaDTO;
import com.ejemplo.DTOs.Solicitud.ProfesorSolicitudDTO;
import com.ejemplo.Fabricas.FabricaInterna.FabricaControladores;


public class VistaConsolaProfesor extends UtilsVistaConsola {

    private FabricaControladores fabrica;

    public VistaConsolaProfesor(FabricaControladores fabrica, java.util.Scanner scanner) {
        super(scanner);
        this.fabrica = fabrica;
    }

    public void mostrarMenu() {
        boolean enMenu = true;

        while (enMenu) {
            limpiarPantalla();
            System.out.println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
            System.out.println("‚ïë            üë®‚Äçüè´ GESTI√ìN DE PROFESORES           ‚ïë");
            System.out.println("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
            System.out.println("‚ïë 1. ‚ûï Crear Profesor                        ‚ïë");
            System.out.println("‚ïë 2. üìã Listar Profesores                     ‚ïë");
            System.out.println("‚ïë 3. ‚úèÔ∏è  Actualizar Profesor                   ‚ïë");
            System.out.println("‚ïë 4. üóëÔ∏è  Eliminar Profesor                     ‚ïë");
            System.out.println("‚ïë 0. üîô Volver                                ‚ïë");
            System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
            System.out.print("üëâ Seleccione una opci√≥n: ");

            int opcion = Integer.parseInt(scanner.nextLine().trim());

            switch (opcion) {
                case 1 -> crearProfesor();
                case 2 -> listarProfesores();
                case 3 -> actualizarProfesor();
                case 4 -> eliminarProfesor();
                case 0 -> enMenu = false;
                default -> mostrarError("Opci√≥n inv√°lida");
            }
        }
    }

    private void crearProfesor() {
        limpiarPantalla();
        System.out.println("‚ûï CREAR PROFESOR");

        try {
            String nombres = leerTexto("Nombres: ");
            String apellidos = leerTexto("Apellidos: ");
            String email = leerTexto("Email: ");
            String contrato = leerTexto("Tipo de contrato: ");

            ProfesorSolicitudDTO dto = new ProfesorSolicitudDTO(nombres, apellidos, email, contrato);
            ProfesorControlador controlador = fabrica.crearControladorProfesor();
            controlador.crearProfesor(dto);

            mostrarMensaje("‚úÖ Profesor creado correctamente.");
        } catch (Exception e) {
            mostrarError("Error al crear: " + e.getMessage());
        }
        pausar();
    }

    private void listarProfesores() {
        limpiarPantalla();
        System.out.println("üìã LISTA DE PROFESORES");

        try {

            ProfesorControlador controlador = fabrica.crearControladorProfesor();
            controlador.listarProfesores();
            List<ProfesorRespuestaDTO> lista = controlador.listarProfesores();

            if (lista.isEmpty()) {
                System.out.println("üîç No hay profesores.");
            } else {
                lista.forEach(System.out::println);
            }
        } catch (Exception e) {
            mostrarError("Error al listar: " + e.getMessage());
        }
        pausar();
    }

    private void actualizarProfesor() {
        limpiarPantalla();
        System.out.println("‚úèÔ∏è ACTUALIZAR PROFESOR");

        try {
            long id = leerLong("ID del profesor: ");
            String nombres = leerTexto("Nuevos nombres: ");
            String apellidos = leerTexto("Nuevos apellidos: ");
            String email = leerTexto("Nuevo email: ");
            String contrato = leerTexto("Nuevo contrato: ");

            ProfesorSolicitudDTO dto = new ProfesorSolicitudDTO(nombres, apellidos, email, contrato);
            ProfesorControlador controlador = fabrica.crearControladorProfesor();
            controlador.actualizarProfesor(id, dto);

            mostrarMensaje("‚úÖ Profesor actualizado.");
        } catch (Exception e) {
            mostrarError("Error al actualizar: " + e.getMessage());
        }
        pausar();
    }

    private void eliminarProfesor() {
        limpiarPantalla();
        System.out.println("üóëÔ∏è ELIMINAR PROFESOR");

        try {
            long id = leerLong("ID del profesor: ");
            String confirm = leerTexto("¬øSeguro? (s/N): ");
            if (confirm.equalsIgnoreCase("s")) {
                ProfesorControlador controlador = fabrica.crearControladorProfesor();
                controlador.eliminarProfesor(id);
                mostrarMensaje("‚úÖ Profesor eliminado.");
            } else {
                mostrarMensaje("‚ùå Cancelado.");
            }
        } catch (Exception e) {
            mostrarError("Error al eliminar: " + e.getMessage());
        }
        pausar();
    }
}
